// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package database

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA00f0bbcDecodeGithubComYaleOpenLabOpenxDatabase(in *jlexer.Lexer, out *Investor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VotingBalance":
			out.VotingBalance = int(in.Int())
		case "AmountInvested":
			out.AmountInvested = float64(in.Float64())
		case "InvestedSolarProjects":
			if in.IsNull() {
				in.Skip()
				out.InvestedSolarProjects = nil
			} else {
				in.Delim('[')
				if out.InvestedSolarProjects == nil {
					if !in.IsDelim(']') {
						out.InvestedSolarProjects = make([]string, 0, 4)
					} else {
						out.InvestedSolarProjects = []string{}
					}
				} else {
					out.InvestedSolarProjects = (out.InvestedSolarProjects)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.InvestedSolarProjects = append(out.InvestedSolarProjects, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InvestedSolarProjectsIndices":
			if in.IsNull() {
				in.Skip()
				out.InvestedSolarProjectsIndices = nil
			} else {
				in.Delim('[')
				if out.InvestedSolarProjectsIndices == nil {
					if !in.IsDelim(']') {
						out.InvestedSolarProjectsIndices = make([]int, 0, 8)
					} else {
						out.InvestedSolarProjectsIndices = []int{}
					}
				} else {
					out.InvestedSolarProjectsIndices = (out.InvestedSolarProjectsIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.InvestedSolarProjectsIndices = append(out.InvestedSolarProjectsIndices, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InvestedBonds":
			if in.IsNull() {
				in.Skip()
				out.InvestedBonds = nil
			} else {
				in.Delim('[')
				if out.InvestedBonds == nil {
					if !in.IsDelim(']') {
						out.InvestedBonds = make([]string, 0, 4)
					} else {
						out.InvestedBonds = []string{}
					}
				} else {
					out.InvestedBonds = (out.InvestedBonds)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.InvestedBonds = append(out.InvestedBonds, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InvestedCoops":
			if in.IsNull() {
				in.Skip()
				out.InvestedCoops = nil
			} else {
				in.Delim('[')
				if out.InvestedCoops == nil {
					if !in.IsDelim(']') {
						out.InvestedCoops = make([]string, 0, 4)
					} else {
						out.InvestedCoops = []string{}
					}
				} else {
					out.InvestedCoops = (out.InvestedCoops)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.InvestedCoops = append(out.InvestedCoops, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "U":
			(out.U).UnmarshalEasyJSON(in)
		case "WeightedROI":
			out.WeightedROI = string(in.String())
		case "AllTimeReturns":
			out.AllTimeReturns = float64(in.Float64())
		case "ReceivedRECs":
			out.ReceivedRECs = string(in.String())
		case "Prorata":
			out.Prorata = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA00f0bbcEncodeGithubComYaleOpenLabOpenxDatabase(out *jwriter.Writer, in Investor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VotingBalance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VotingBalance))
	}
	{
		const prefix string = ",\"AmountInvested\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AmountInvested))
	}
	{
		const prefix string = ",\"InvestedSolarProjects\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestedSolarProjects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.InvestedSolarProjects {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InvestedSolarProjectsIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestedSolarProjectsIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.InvestedSolarProjectsIndices {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InvestedBonds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestedBonds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.InvestedBonds {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InvestedCoops\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestedCoops == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.InvestedCoops {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"U\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.U).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"WeightedROI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WeightedROI))
	}
	{
		const prefix string = ",\"AllTimeReturns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AllTimeReturns))
	}
	{
		const prefix string = ",\"ReceivedRECs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReceivedRECs))
	}
	{
		const prefix string = ",\"Prorata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prorata))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Investor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA00f0bbcEncodeGithubComYaleOpenLabOpenxDatabase(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Investor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA00f0bbcEncodeGithubComYaleOpenLabOpenxDatabase(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Investor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA00f0bbcDecodeGithubComYaleOpenLabOpenxDatabase(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Investor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA00f0bbcDecodeGithubComYaleOpenLabOpenxDatabase(l, v)
}
