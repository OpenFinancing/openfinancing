// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package opensolar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar(in *jlexer.Lexer, out *statusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int(in.Int())
		case "Status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar(out *jwriter.Writer, in statusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v statusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v statusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *statusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *statusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(in *jlexer.Lexer, out *TermsHelper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Variable":
			out.Variable = string(in.String())
		case "Value":
			out.Value = string(in.String())
		case "RelevantParty":
			out.RelevantParty = string(in.String())
		case "Note":
			out.Note = string(in.String())
		case "Status":
			out.Status = string(in.String())
		case "SupportDoc":
			out.SupportDoc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(out *jwriter.Writer, in TermsHelper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Variable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Variable))
	}
	{
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"RelevantParty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelevantParty))
	}
	{
		const prefix string = ",\"Note\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Note))
	}
	{
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"SupportDoc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SupportDoc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TermsHelper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TermsHelper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TermsHelper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TermsHelper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar2(in *jlexer.Lexer, out *SustainabilityHelper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CarbonDrawdown":
			out.CarbonDrawdown = string(in.String())
		case "CommnunityValue":
			out.CommnunityValue = string(in.String())
		case "LCA":
			out.LCA = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar2(out *jwriter.Writer, in SustainabilityHelper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CarbonDrawdown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CarbonDrawdown))
	}
	{
		const prefix string = ",\"CommnunityValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommnunityValue))
	}
	{
		const prefix string = ",\"LCA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LCA))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SustainabilityHelper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SustainabilityHelper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SustainabilityHelper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SustainabilityHelper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar2(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar3(in *jlexer.Lexer, out *SolarProjectArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(SolarProjectArray, 0, 1)
			} else {
				*out = SolarProjectArray{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Project
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar3(out *jwriter.Writer, in SolarProjectArray) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v SolarProjectArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SolarProjectArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SolarProjectArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SolarProjectArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar3(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar4(in *jlexer.Lexer, out *ProjectSizeHelper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PVSolar":
			out.PVSolar = string(in.String())
		case "Storage":
			out.Storage = string(in.String())
		case "Critical":
			out.Critical = float64(in.Float64())
		case "InverterCapacity":
			out.InverterCapacity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar4(out *jwriter.Writer, in ProjectSizeHelper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PVSolar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PVSolar))
	}
	{
		const prefix string = ",\"Storage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Storage))
	}
	{
		const prefix string = ",\"Critical\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Critical))
	}
	{
		const prefix string = ",\"InverterCapacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InverterCapacity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectSizeHelper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectSizeHelper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectSizeHelper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectSizeHelper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar4(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar5(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Index":
			out.Index = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Country":
			out.Country = string(in.String())
		case "TotalValue":
			out.TotalValue = float64(in.Float64())
		case "PanelSize":
			out.PanelSize = string(in.String())
		case "PanelTechnicalDescription":
			out.PanelTechnicalDescription = string(in.String())
		case "Inverter":
			out.Inverter = string(in.String())
		case "ChargeRegulator":
			out.ChargeRegulator = string(in.String())
		case "ControlPanel":
			out.ControlPanel = string(in.String())
		case "CommBox":
			out.CommBox = string(in.String())
		case "ACTransfer":
			out.ACTransfer = string(in.String())
		case "SolarCombiner":
			out.SolarCombiner = string(in.String())
		case "Batteries":
			out.Batteries = string(in.String())
		case "IoTHub":
			out.IoTHub = string(in.String())
		case "Metadata":
			out.Metadata = string(in.String())
		case "MoneyRaised":
			out.MoneyRaised = float64(in.Float64())
		case "EstimatedAcquisition":
			out.EstimatedAcquisition = int(in.Int())
		case "BalLeft":
			out.BalLeft = float64(in.Float64())
		case "InterestRate":
			out.InterestRate = float64(in.Float64())
		case "Tax":
			out.Tax = string(in.String())
		case "DateInitiated":
			out.DateInitiated = string(in.String())
		case "DateFunded":
			out.DateFunded = string(in.String())
		case "DateLastPaid":
			out.DateLastPaid = int64(in.Int64())
		case "AuctionType":
			out.AuctionType = string(in.String())
		case "InvestmentType":
			out.InvestmentType = string(in.String())
		case "PaybackPeriod":
			out.PaybackPeriod = int(in.Int())
		case "Stage":
			out.Stage = int(in.Int())
		case "InvestorAssetCode":
			out.InvestorAssetCode = string(in.String())
		case "DebtAssetCode":
			out.DebtAssetCode = string(in.String())
		case "PaybackAssetCode":
			out.PaybackAssetCode = string(in.String())
		case "SeedAssetCode":
			out.SeedAssetCode = string(in.String())
		case "SeedInvestmentFactor":
			out.SeedInvestmentFactor = float64(in.Float64())
		case "SeedInvestmentCap":
			out.SeedInvestmentCap = float64(in.Float64())
		case "ProposedInvetmentCap":
			out.ProposedInvetmentCap = float64(in.Float64())
		case "SelfFund":
			out.SelfFund = float64(in.Float64())
		case "SecurityIssuer":
			out.SecurityIssuer = string(in.String())
		case "BrokerDealer":
			out.BrokerDealer = string(in.String())
		case "RecipientIndex":
			out.RecipientIndex = int(in.Int())
		case "OriginatorIndex":
			out.OriginatorIndex = int(in.Int())
		case "GuarantorIndex":
			out.GuarantorIndex = int(in.Int())
		case "ContractorIndex":
			out.ContractorIndex = int(in.Int())
		case "MainDeveloperIndex":
			out.MainDeveloperIndex = int(in.Int())
		case "BlendedCapitalInvestorIndex":
			out.BlendedCapitalInvestorIndex = int(in.Int())
		case "InvestorIndices":
			if in.IsNull() {
				in.Skip()
				out.InvestorIndices = nil
			} else {
				in.Delim('[')
				if out.InvestorIndices == nil {
					if !in.IsDelim(']') {
						out.InvestorIndices = make([]int, 0, 8)
					} else {
						out.InvestorIndices = []int{}
					}
				} else {
					out.InvestorIndices = (out.InvestorIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.InvestorIndices = append(out.InvestorIndices, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SeedInvestorIndices":
			if in.IsNull() {
				in.Skip()
				out.SeedInvestorIndices = nil
			} else {
				in.Delim('[')
				if out.SeedInvestorIndices == nil {
					if !in.IsDelim(']') {
						out.SeedInvestorIndices = make([]int, 0, 8)
					} else {
						out.SeedInvestorIndices = []int{}
					}
				} else {
					out.SeedInvestorIndices = (out.SeedInvestorIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.SeedInvestorIndices = append(out.SeedInvestorIndices, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RecipientIndices":
			if in.IsNull() {
				in.Skip()
				out.RecipientIndices = nil
			} else {
				in.Delim('[')
				if out.RecipientIndices == nil {
					if !in.IsDelim(']') {
						out.RecipientIndices = make([]int, 0, 8)
					} else {
						out.RecipientIndices = []int{}
					}
				} else {
					out.RecipientIndices = (out.RecipientIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.RecipientIndices = append(out.RecipientIndices, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DeveloperIndices":
			if in.IsNull() {
				in.Skip()
				out.DeveloperIndices = nil
			} else {
				in.Delim('[')
				if out.DeveloperIndices == nil {
					if !in.IsDelim(']') {
						out.DeveloperIndices = make([]int, 0, 8)
					} else {
						out.DeveloperIndices = []int{}
					}
				} else {
					out.DeveloperIndices = (out.DeveloperIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.DeveloperIndices = append(out.DeveloperIndices, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ContractorFee":
			out.ContractorFee = float64(in.Float64())
		case "OriginatorFee":
			out.OriginatorFee = float64(in.Float64())
		case "DeveloperFee":
			if in.IsNull() {
				in.Skip()
				out.DeveloperFee = nil
			} else {
				in.Delim('[')
				if out.DeveloperFee == nil {
					if !in.IsDelim(']') {
						out.DeveloperFee = make([]float64, 0, 8)
					} else {
						out.DeveloperFee = []float64{}
					}
				} else {
					out.DeveloperFee = (out.DeveloperFee)[:0]
				}
				for !in.IsDelim(']') {
					var v8 float64
					v8 = float64(in.Float64())
					out.DeveloperFee = append(out.DeveloperFee, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DebtInvestor1":
			out.DebtInvestor1 = string(in.String())
		case "DebtInvestor2":
			out.DebtInvestor2 = string(in.String())
		case "TaxEquityInvestor":
			out.TaxEquityInvestor = string(in.String())
		case "Lock":
			out.Lock = bool(in.Bool())
		case "LockPwd":
			out.LockPwd = string(in.String())
		case "Votes":
			out.Votes = int(in.Int())
		case "AmountOwed":
			out.AmountOwed = float64(in.Float64())
		case "Reputation":
			out.Reputation = float64(in.Float64())
		case "OwnershipShift":
			out.OwnershipShift = float64(in.Float64())
		case "StageData":
			if in.IsNull() {
				in.Skip()
				out.StageData = nil
			} else {
				in.Delim('[')
				if out.StageData == nil {
					if !in.IsDelim(']') {
						out.StageData = make([]string, 0, 4)
					} else {
						out.StageData = []string{}
					}
				} else {
					out.StageData = (out.StageData)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.StageData = append(out.StageData, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StageChecklist":
			if in.IsNull() {
				in.Skip()
				out.StageChecklist = nil
			} else {
				in.Delim('[')
				if out.StageChecklist == nil {
					if !in.IsDelim(']') {
						out.StageChecklist = make([]map[string]bool, 0, 8)
					} else {
						out.StageChecklist = []map[string]bool{}
					}
				} else {
					out.StageChecklist = (out.StageChecklist)[:0]
				}
				for !in.IsDelim(']') {
					var v10 map[string]bool
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v10 = make(map[string]bool)
						} else {
							v10 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v11 bool
							v11 = bool(in.Bool())
							(v10)[key] = v11
							in.WantComma()
						}
						in.Delim('}')
					}
					out.StageChecklist = append(out.StageChecklist, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InvestorMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.InvestorMap = make(map[string]float64)
				} else {
					out.InvestorMap = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 float64
					v12 = float64(in.Float64())
					(out.InvestorMap)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "WaterfallMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.WaterfallMap = make(map[string]float64)
				} else {
					out.WaterfallMap = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 float64
					v13 = float64(in.Float64())
					(out.WaterfallMap)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Terms":
			if in.IsNull() {
				in.Skip()
				out.Terms = nil
			} else {
				in.Delim('[')
				if out.Terms == nil {
					if !in.IsDelim(']') {
						out.Terms = make([]TermsHelper, 0, 1)
					} else {
						out.Terms = []TermsHelper{}
					}
				} else {
					out.Terms = (out.Terms)[:0]
				}
				for !in.IsDelim(']') {
					var v14 TermsHelper
					(v14).UnmarshalEasyJSON(in)
					out.Terms = append(out.Terms, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InvestmentMetrics":
			(out.InvestmentMetrics).UnmarshalEasyJSON(in)
		case "FinancialMetrics":
			(out.FinancialMetrics).UnmarshalEasyJSON(in)
		case "ProjectSizeMetric":
			(out.ProjectSizeMetric).UnmarshalEasyJSON(in)
		case "SustainabilityMetric":
			(out.SustainabilityMetric).UnmarshalEasyJSON(in)
		case "AutoReloadInterval":
			out.AutoReloadInterval = float64(in.Float64())
		case "ResilienceRating":
			out.ResilienceRating = float64(in.Float64())
		case "ActionsRequired":
			out.ActionsRequired = string(in.String())
		case "Bullet1":
			out.Bullet1 = string(in.String())
		case "Bullet2":
			out.Bullet2 = string(in.String())
		case "Bullet3":
			out.Bullet3 = string(in.String())
		case "LegalProjectOverviewHash":
			out.LegalProjectOverviewHash = string(in.String())
		case "LegalPPAHash":
			out.LegalPPAHash = string(in.String())
		case "LegalRECAgreementHash":
			out.LegalRECAgreementHash = string(in.String())
		case "GuarantorAgreementHash":
			out.GuarantorAgreementHash = string(in.String())
		case "ContractorAgreementHash":
			out.ContractorAgreementHash = string(in.String())
		case "StakeholderAgreementHash":
			out.StakeholderAgreementHash = string(in.String())
		case "CommunityEnergyHash":
			out.CommunityEnergyHash = string(in.String())
		case "FinancialReportingHash":
			out.FinancialReportingHash = string(in.String())
		case "Contract1":
			out.Contract1 = string(in.String())
		case "Contract2":
			out.Contract2 = string(in.String())
		case "Contract3":
			out.Contract3 = string(in.String())
		case "Contract4":
			out.Contract4 = string(in.String())
		case "Contract5":
			out.Contract5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar5(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"State\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"TotalValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalValue))
	}
	{
		const prefix string = ",\"PanelSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PanelSize))
	}
	{
		const prefix string = ",\"PanelTechnicalDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PanelTechnicalDescription))
	}
	{
		const prefix string = ",\"Inverter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Inverter))
	}
	{
		const prefix string = ",\"ChargeRegulator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChargeRegulator))
	}
	{
		const prefix string = ",\"ControlPanel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ControlPanel))
	}
	{
		const prefix string = ",\"CommBox\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommBox))
	}
	{
		const prefix string = ",\"ACTransfer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ACTransfer))
	}
	{
		const prefix string = ",\"SolarCombiner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SolarCombiner))
	}
	{
		const prefix string = ",\"Batteries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Batteries))
	}
	{
		const prefix string = ",\"IoTHub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IoTHub))
	}
	{
		const prefix string = ",\"Metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metadata))
	}
	{
		const prefix string = ",\"MoneyRaised\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MoneyRaised))
	}
	{
		const prefix string = ",\"EstimatedAcquisition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EstimatedAcquisition))
	}
	{
		const prefix string = ",\"BalLeft\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BalLeft))
	}
	{
		const prefix string = ",\"InterestRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.InterestRate))
	}
	{
		const prefix string = ",\"Tax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tax))
	}
	{
		const prefix string = ",\"DateInitiated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DateInitiated))
	}
	{
		const prefix string = ",\"DateFunded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DateFunded))
	}
	{
		const prefix string = ",\"DateLastPaid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DateLastPaid))
	}
	{
		const prefix string = ",\"AuctionType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuctionType))
	}
	{
		const prefix string = ",\"InvestmentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvestmentType))
	}
	{
		const prefix string = ",\"PaybackPeriod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PaybackPeriod))
	}
	{
		const prefix string = ",\"Stage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Stage))
	}
	{
		const prefix string = ",\"InvestorAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvestorAssetCode))
	}
	{
		const prefix string = ",\"DebtAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DebtAssetCode))
	}
	{
		const prefix string = ",\"PaybackAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PaybackAssetCode))
	}
	{
		const prefix string = ",\"SeedAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SeedAssetCode))
	}
	{
		const prefix string = ",\"SeedInvestmentFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SeedInvestmentFactor))
	}
	{
		const prefix string = ",\"SeedInvestmentCap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SeedInvestmentCap))
	}
	{
		const prefix string = ",\"ProposedInvetmentCap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ProposedInvetmentCap))
	}
	{
		const prefix string = ",\"SelfFund\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SelfFund))
	}
	{
		const prefix string = ",\"SecurityIssuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityIssuer))
	}
	{
		const prefix string = ",\"BrokerDealer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BrokerDealer))
	}
	{
		const prefix string = ",\"RecipientIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RecipientIndex))
	}
	{
		const prefix string = ",\"OriginatorIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OriginatorIndex))
	}
	{
		const prefix string = ",\"GuarantorIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GuarantorIndex))
	}
	{
		const prefix string = ",\"ContractorIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContractorIndex))
	}
	{
		const prefix string = ",\"MainDeveloperIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MainDeveloperIndex))
	}
	{
		const prefix string = ",\"BlendedCapitalInvestorIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BlendedCapitalInvestorIndex))
	}
	{
		const prefix string = ",\"InvestorIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestorIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.InvestorIndices {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SeedInvestorIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SeedInvestorIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.SeedInvestorIndices {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RecipientIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RecipientIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.RecipientIndices {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v20))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DeveloperIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DeveloperIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.DeveloperIndices {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ContractorFee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ContractorFee))
	}
	{
		const prefix string = ",\"OriginatorFee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.OriginatorFee))
	}
	{
		const prefix string = ",\"DeveloperFee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DeveloperFee == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.DeveloperFee {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DebtInvestor1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DebtInvestor1))
	}
	{
		const prefix string = ",\"DebtInvestor2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DebtInvestor2))
	}
	{
		const prefix string = ",\"TaxEquityInvestor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TaxEquityInvestor))
	}
	{
		const prefix string = ",\"Lock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Lock))
	}
	{
		const prefix string = ",\"LockPwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LockPwd))
	}
	{
		const prefix string = ",\"Votes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Votes))
	}
	{
		const prefix string = ",\"AmountOwed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AmountOwed))
	}
	{
		const prefix string = ",\"Reputation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Reputation))
	}
	{
		const prefix string = ",\"OwnershipShift\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.OwnershipShift))
	}
	{
		const prefix string = ",\"StageData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StageData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.StageData {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"StageChecklist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.StageChecklist == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.StageChecklist {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v29First := true
					for v29Name, v29Value := range v28 {
						if v29First {
							v29First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v29Name))
						out.RawByte(':')
						out.Bool(bool(v29Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InvestorMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestorMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.InvestorMap {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				out.Float64(float64(v30Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"WaterfallMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WaterfallMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.WaterfallMap {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				out.Float64(float64(v31Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Terms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Terms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Terms {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InvestmentMetrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.InvestmentMetrics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"FinancialMetrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.FinancialMetrics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ProjectSizeMetric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ProjectSizeMetric).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SustainabilityMetric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SustainabilityMetric).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"AutoReloadInterval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AutoReloadInterval))
	}
	{
		const prefix string = ",\"ResilienceRating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ResilienceRating))
	}
	{
		const prefix string = ",\"ActionsRequired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActionsRequired))
	}
	{
		const prefix string = ",\"Bullet1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bullet1))
	}
	{
		const prefix string = ",\"Bullet2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bullet2))
	}
	{
		const prefix string = ",\"Bullet3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bullet3))
	}
	{
		const prefix string = ",\"LegalProjectOverviewHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LegalProjectOverviewHash))
	}
	{
		const prefix string = ",\"LegalPPAHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LegalPPAHash))
	}
	{
		const prefix string = ",\"LegalRECAgreementHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LegalRECAgreementHash))
	}
	{
		const prefix string = ",\"GuarantorAgreementHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GuarantorAgreementHash))
	}
	{
		const prefix string = ",\"ContractorAgreementHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContractorAgreementHash))
	}
	{
		const prefix string = ",\"StakeholderAgreementHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StakeholderAgreementHash))
	}
	{
		const prefix string = ",\"CommunityEnergyHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommunityEnergyHash))
	}
	{
		const prefix string = ",\"FinancialReportingHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FinancialReportingHash))
	}
	{
		const prefix string = ",\"Contract1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contract1))
	}
	{
		const prefix string = ",\"Contract2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contract2))
	}
	{
		const prefix string = ",\"Contract3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contract3))
	}
	{
		const prefix string = ",\"Contract4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contract4))
	}
	{
		const prefix string = ",\"Contract5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contract5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar5(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar6(in *jlexer.Lexer, out *InvestmentHelper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Capex":
			out.Capex = string(in.String())
		case "Hardware":
			out.Hardware = float64(in.Float64())
		case "FirstLossEscrow":
			out.FirstLossEscrow = string(in.String())
		case "CertificationCosts":
			out.CertificationCosts = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar6(out *jwriter.Writer, in InvestmentHelper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Capex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Capex))
	}
	{
		const prefix string = ",\"Hardware\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Hardware))
	}
	{
		const prefix string = ",\"FirstLossEscrow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstLossEscrow))
	}
	{
		const prefix string = ",\"CertificationCosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CertificationCosts))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvestmentHelper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvestmentHelper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvestmentHelper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvestmentHelper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar6(l, v)
}
func easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar7(in *jlexer.Lexer, out *FinancialHelper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Return":
			out.Return = float64(in.Float64())
		case "Insurance":
			out.Insurance = string(in.String())
		case "Tariff":
			out.Tariff = string(in.String())
		case "Maturity":
			out.Maturity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar7(out *jwriter.Writer, in FinancialHelper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Return\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Return))
	}
	{
		const prefix string = ",\"Insurance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Insurance))
	}
	{
		const prefix string = ",\"Tariff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tariff))
	}
	{
		const prefix string = ",\"Maturity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Maturity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FinancialHelper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FinancialHelper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a457b9dEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FinancialHelper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FinancialHelper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a457b9dDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar7(l, v)
}
