// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package opensolar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e8ab7adDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar(in *jlexer.Lexer, out *Entity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "U":
			(out.U).UnmarshalEasyJSON(in)
		case "Contractor":
			out.Contractor = bool(in.Bool())
		case "Developer":
			out.Developer = bool(in.Bool())
		case "Originator":
			out.Originator = bool(in.Bool())
		case "Guarantor":
			out.Guarantor = bool(in.Bool())
		case "PastContracts":
			if in.IsNull() {
				in.Skip()
				out.PastContracts = nil
			} else {
				in.Delim('[')
				if out.PastContracts == nil {
					if !in.IsDelim(']') {
						out.PastContracts = make([]Project, 0, 1)
					} else {
						out.PastContracts = []Project{}
					}
				} else {
					out.PastContracts = (out.PastContracts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Project
					(v1).UnmarshalEasyJSON(in)
					out.PastContracts = append(out.PastContracts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ProposedContracts":
			if in.IsNull() {
				in.Skip()
				out.ProposedContracts = nil
			} else {
				in.Delim('[')
				if out.ProposedContracts == nil {
					if !in.IsDelim(']') {
						out.ProposedContracts = make([]Project, 0, 1)
					} else {
						out.ProposedContracts = []Project{}
					}
				} else {
					out.ProposedContracts = (out.ProposedContracts)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Project
					(v2).UnmarshalEasyJSON(in)
					out.ProposedContracts = append(out.ProposedContracts, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PresentContracts":
			if in.IsNull() {
				in.Skip()
				out.PresentContracts = nil
			} else {
				in.Delim('[')
				if out.PresentContracts == nil {
					if !in.IsDelim(']') {
						out.PresentContracts = make([]Project, 0, 1)
					} else {
						out.PresentContracts = []Project{}
					}
				} else {
					out.PresentContracts = (out.PresentContracts)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Project
					(v3).UnmarshalEasyJSON(in)
					out.PresentContracts = append(out.PresentContracts, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PastFeedback":
			if in.IsNull() {
				in.Skip()
				out.PastFeedback = nil
			} else {
				in.Delim('[')
				if out.PastFeedback == nil {
					if !in.IsDelim(']') {
						out.PastFeedback = make([]Feedback, 0, 1)
					} else {
						out.PastFeedback = []Feedback{}
					}
				} else {
					out.PastFeedback = (out.PastFeedback)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Feedback
					easyjson3e8ab7adDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(in, &v4)
					out.PastFeedback = append(out.PastFeedback, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Collateral":
			out.Collateral = float64(in.Float64())
		case "CollateralData":
			if in.IsNull() {
				in.Skip()
				out.CollateralData = nil
			} else {
				in.Delim('[')
				if out.CollateralData == nil {
					if !in.IsDelim(']') {
						out.CollateralData = make([]string, 0, 4)
					} else {
						out.CollateralData = []string{}
					}
				} else {
					out.CollateralData = (out.CollateralData)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.CollateralData = append(out.CollateralData, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar(out *jwriter.Writer, in Entity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"U\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.U).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Contractor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Contractor))
	}
	{
		const prefix string = ",\"Developer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Developer))
	}
	{
		const prefix string = ",\"Originator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Originator))
	}
	{
		const prefix string = ",\"Guarantor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Guarantor))
	}
	{
		const prefix string = ",\"PastContracts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PastContracts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.PastContracts {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ProposedContracts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProposedContracts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.ProposedContracts {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PresentContracts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PresentContracts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.PresentContracts {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PastFeedback\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PastFeedback == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.PastFeedback {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjson3e8ab7adEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(out, v13)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Collateral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Collateral))
	}
	{
		const prefix string = ",\"CollateralData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CollateralData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.CollateralData {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Entity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar(l, v)
}
func easyjson3e8ab7adDecodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(in *jlexer.Lexer, out *Feedback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Content":
			out.Content = string(in.String())
		case "From":
			(out.From).UnmarshalEasyJSON(in)
		case "To":
			(out.To).UnmarshalEasyJSON(in)
		case "Date":
			out.Date = string(in.String())
		case "Contract":
			if in.IsNull() {
				in.Skip()
				out.Contract = nil
			} else {
				in.Delim('[')
				if out.Contract == nil {
					if !in.IsDelim(']') {
						out.Contract = make([]Project, 0, 1)
					} else {
						out.Contract = []Project{}
					}
				} else {
					out.Contract = (out.Contract)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Project
					(v16).UnmarshalEasyJSON(in)
					out.Contract = append(out.Contract, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComYaleOpenLabOpenxPlatformsOpensolar1(out *jwriter.Writer, in Feedback) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"From\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.From).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"To\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.To).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"Contract\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Contract == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Contract {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
