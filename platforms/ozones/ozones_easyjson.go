// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ozones

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2c583588DecodeGithubComYaleOpenLabOpenxPlatformsOzones(in *jlexer.Lexer, out *LivingUnitCoop) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Index":
			out.Index = int(in.Int())
		case "Title":
			out.Title = string(in.String())
		case "Location":
			out.Location = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "UnitsSold":
			out.UnitsSold = int(in.Int())
		case "TypeOfUnit":
			out.TypeOfUnit = string(in.String())
		case "Amount":
			out.Amount = float64(in.Float64())
		case "SecurityType":
			out.SecurityType = string(in.String())
		case "MaturationDate":
			out.MaturationDate = string(in.String())
		case "MonthlyPayment":
			out.MonthlyPayment = float64(in.Float64())
		case "MemberRights":
			out.MemberRights = string(in.String())
		case "InterestRate":
			out.InterestRate = float64(in.Float64())
		case "Rating":
			out.Rating = string(in.String())
		case "BondIssuer":
			out.BondIssuer = string(in.String())
		case "Underwriter":
			out.Underwriter = string(in.String())
		case "DateInitiated":
			out.DateInitiated = string(in.String())
		case "InvestorAssetCode":
			out.InvestorAssetCode = string(in.String())
		case "ResidentIndices":
			if in.IsNull() {
				in.Skip()
				out.ResidentIndices = nil
			} else {
				in.Delim('[')
				if out.ResidentIndices == nil {
					if !in.IsDelim(']') {
						out.ResidentIndices = make([]int, 0, 8)
					} else {
						out.ResidentIndices = []int{}
					}
				} else {
					out.ResidentIndices = (out.ResidentIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.ResidentIndices = append(out.ResidentIndices, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RecipientIndex":
			out.RecipientIndex = int(in.Int())
		case "LockPwd":
			out.LockPwd = string(in.String())
		case "Lock":
			out.Lock = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c583588EncodeGithubComYaleOpenLabOpenxPlatformsOzones(out *jwriter.Writer, in LivingUnitCoop) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"Title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"UnitsSold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UnitsSold))
	}
	{
		const prefix string = ",\"TypeOfUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TypeOfUnit))
	}
	{
		const prefix string = ",\"Amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"SecurityType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityType))
	}
	{
		const prefix string = ",\"MaturationDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaturationDate))
	}
	{
		const prefix string = ",\"MonthlyPayment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MonthlyPayment))
	}
	{
		const prefix string = ",\"MemberRights\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MemberRights))
	}
	{
		const prefix string = ",\"InterestRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.InterestRate))
	}
	{
		const prefix string = ",\"Rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"BondIssuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BondIssuer))
	}
	{
		const prefix string = ",\"Underwriter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Underwriter))
	}
	{
		const prefix string = ",\"DateInitiated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DateInitiated))
	}
	{
		const prefix string = ",\"InvestorAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvestorAssetCode))
	}
	{
		const prefix string = ",\"ResidentIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ResidentIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ResidentIndices {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RecipientIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RecipientIndex))
	}
	{
		const prefix string = ",\"LockPwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LockPwd))
	}
	{
		const prefix string = ",\"Lock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Lock))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LivingUnitCoop) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c583588EncodeGithubComYaleOpenLabOpenxPlatformsOzones(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LivingUnitCoop) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c583588EncodeGithubComYaleOpenLabOpenxPlatformsOzones(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LivingUnitCoop) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c583588DecodeGithubComYaleOpenLabOpenxPlatformsOzones(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LivingUnitCoop) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c583588DecodeGithubComYaleOpenLabOpenxPlatformsOzones(l, v)
}
func easyjson2c583588DecodeGithubComYaleOpenLabOpenxPlatformsOzones1(in *jlexer.Lexer, out *ConstructionBond) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Index":
			out.Index = int(in.Int())
		case "Title":
			out.Title = string(in.String())
		case "Location":
			out.Location = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "AmountRaised":
			out.AmountRaised = float64(in.Float64())
		case "InstrumentType":
			out.InstrumentType = string(in.String())
		case "Amount":
			out.Amount = string(in.String())
		case "CostOfUnit":
			out.CostOfUnit = float64(in.Float64())
		case "NoOfUnits":
			out.NoOfUnits = int(in.Int())
		case "SecurityType":
			out.SecurityType = string(in.String())
		case "Tax":
			out.Tax = string(in.String())
		case "MaturationDate":
			out.MaturationDate = string(in.String())
		case "InterestRate":
			out.InterestRate = float64(in.Float64())
		case "Rating":
			out.Rating = string(in.String())
		case "BondIssuer":
			out.BondIssuer = string(in.String())
		case "BondHolders":
			out.BondHolders = string(in.String())
		case "Underwriter":
			out.Underwriter = string(in.String())
		case "DateInitiated":
			out.DateInitiated = string(in.String())
		case "InvestorAssetCode":
			out.InvestorAssetCode = string(in.String())
		case "DebtAssetCode":
			out.DebtAssetCode = string(in.String())
		case "InvestorIndices":
			if in.IsNull() {
				in.Skip()
				out.InvestorIndices = nil
			} else {
				in.Delim('[')
				if out.InvestorIndices == nil {
					if !in.IsDelim(']') {
						out.InvestorIndices = make([]int, 0, 8)
					} else {
						out.InvestorIndices = []int{}
					}
				} else {
					out.InvestorIndices = (out.InvestorIndices)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.InvestorIndices = append(out.InvestorIndices, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RecipientIndex":
			out.RecipientIndex = int(in.Int())
		case "LockPwd":
			out.LockPwd = string(in.String())
		case "Lock":
			out.Lock = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c583588EncodeGithubComYaleOpenLabOpenxPlatformsOzones1(out *jwriter.Writer, in ConstructionBond) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"Title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"AmountRaised\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AmountRaised))
	}
	{
		const prefix string = ",\"InstrumentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InstrumentType))
	}
	{
		const prefix string = ",\"Amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"CostOfUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.CostOfUnit))
	}
	{
		const prefix string = ",\"NoOfUnits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NoOfUnits))
	}
	{
		const prefix string = ",\"SecurityType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityType))
	}
	{
		const prefix string = ",\"Tax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tax))
	}
	{
		const prefix string = ",\"MaturationDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaturationDate))
	}
	{
		const prefix string = ",\"InterestRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.InterestRate))
	}
	{
		const prefix string = ",\"Rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"BondIssuer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BondIssuer))
	}
	{
		const prefix string = ",\"BondHolders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BondHolders))
	}
	{
		const prefix string = ",\"Underwriter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Underwriter))
	}
	{
		const prefix string = ",\"DateInitiated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DateInitiated))
	}
	{
		const prefix string = ",\"InvestorAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvestorAssetCode))
	}
	{
		const prefix string = ",\"DebtAssetCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DebtAssetCode))
	}
	{
		const prefix string = ",\"InvestorIndices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.InvestorIndices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.InvestorIndices {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RecipientIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RecipientIndex))
	}
	{
		const prefix string = ",\"LockPwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LockPwd))
	}
	{
		const prefix string = ",\"Lock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Lock))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConstructionBond) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c583588EncodeGithubComYaleOpenLabOpenxPlatformsOzones1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConstructionBond) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c583588EncodeGithubComYaleOpenLabOpenxPlatformsOzones1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConstructionBond) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c583588DecodeGithubComYaleOpenLabOpenxPlatformsOzones1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConstructionBond) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c583588DecodeGithubComYaleOpenLabOpenxPlatformsOzones1(l, v)
}
